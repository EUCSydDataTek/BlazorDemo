@page "/weather"
@inject ILocalWeatherService LocalWeather
@inject IWeatherApiService WeatherApi

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<button class="btn btn-primary" @onclick="GetFromLocalAsync">Get Local</button>
<button class="btn btn-primary" @onclick="GetFromApiAsync">Get Api</button>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        await GetFromLocalAsync();
    }

    public async Task GetFromLocalAsync()
    {
        forecasts = await LocalWeather.GetLocalWeatherAsync();
    }

    public async Task GetFromApiAsync()
    {
        forecasts = await WeatherApi.GetWeatherForecasts();
    }
}
